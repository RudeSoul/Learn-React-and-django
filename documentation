*********** STEPS FOR CREATING DJANGO PROJECT AND REACT FRAMEWORK ***********


Step 1  : Creating a Python Virtual Environment and Installing Dependencies


		In this step, we'll create a virtual environment and install the required dependencies for our application, including Django, the Django REST framework, and django-cors-headers.

		Our application will use two different development servers for Django and React. They will run on different ports and will function as two separate domains. Because of this, we need to enable cross-origin resource sharing (CORS) to send HTTP requests from React to Django without being blocked by the browser.

		Navigate to your home directory and create a virtual environment using the venv Python 3 module:

		cd ~
		python3 -m venv ./env
		Activate the created virtual environment using source:

		source env/bin/activate
		Next, install the project's dependencies with pip. These will include:

		Django: The web framework for the project.
		Django REST framework: A third-party application that builds REST APIs with Django.
		django-cors-headers: A package that enables CORS.
		Install the Django framework:

		On cmd : pip install django djangorestframework django-cors-headers
			With the project dependencies installed, you can create the Django project and the React frontend.



To create django-prject :

 
Step2:	django-admin startproject projectname i.e in our case project name is learnreact


		2.1: Here you get lots of file like 
			2.1.1: manage.py 

			and folder with same name as project name

		2.2: Dig down into that folder of same name you will get some file with name 
			2.2.1: __init__.py
			2.2.2:	settings.py
			2.2.3:	urls.py
			2.2.4:	wsgi.py

		2.3: Some information of those files are:

			2.3.1: Manage.py : The utility script that does a number of administrative tasks.
			
			2.3.2: setting.py : The main configuration file for the Django project where you can modify the 						project's settings. These settings include variables such as INSTALLED_APPS, a 						list of strings designating the enabled applications for your project. The 	 						Django documentation has more information about available settings.

			2.3.3: urls.py   : This file contains a list of URL patterns and related views. Each pattern maps a  					connection between a URL and the function that should be called for that URL. For 					more on URLs and views, please refer to our tutorial on How To Create Django Views




    	2.4 : Our first step in working with the project will be to configure the packages we installed in the 		  previous step, including the Django REST framework and the Django CORS package, by adding them to 	  settings.py. Open the file with Visual Code Studio or your favorite editor:

			2.4.1 : Visual Code Studio: ~/djangoreactproject/djangoreactproject/settings.py
					Navigate to the INSTALLED_APPS setting and add the rest_framework and corsheaders applications to the bottom of the list:

			2.4.2 : ~/djangoreactproject/djangoreactproject/settings.py
					...

					INSTALLED_APPS = [
    					'django.contrib.admin',
    					'django.contrib.auth',
    					'django.contrib.contenttypes',
    					'django.contrib.sessions',
    					'django.contrib.messages',
    					'django.contrib.staticfiles',
    					'rest_framework',
    					'corsheaders'
									]
		2.5 : Next, add the corsheaders.middleware.CorsMiddleware middleware from the previously installed CORS 	   package to the MIDDLEWARE setting. This setting is a list of middlewares, a Python class that 		   contains code processed each time your web application handles a request or response:

			2.5.1 : ~/djangoreactproject/djangoreactproject/settings.py
					...

					MIDDLEWARE = [
									...
									'django.contrib.messages.middleware.MessageMiddleware',
									'django.middleware.clickjacking.XFrameOptionsMiddleware',
									'corsheaders.middleware.CorsMiddleware'
								  ]
		2.6: Next, you can enable CORS. The CORS_ORIGIN_ALLOW_ALL setting specifies whether or not you want to 		 allow CORS for all domains, and CORS_ORIGIN_WHITELIST is a Python tuple that contains allowed URLs. 	  In our case, because the React development server will be running at http://localhost:3000, we will 	   add new CORS_ORIGIN_ALLOW_ALL = False and CORS_ORIGIN_WHITELIST('localhost:3000',) settings to our 		 settings.py file. Add these settings anywhere in the file:

			2.6.1 : ~/djangoreactproject/djangoreactproject/settings.py
					...
					CORS_ORIGIN_ALLOW_ALL = False

					CORS_ORIGIN_WHITELIST = (
     			   'localhost:3000',
					)
					...

					You can find more configuration options in the django-cors-headers docs.

			2.6.2 : Save the file and exit the editor when you are finished.

    2.7 : Still in the ~/djangoreactproject directory, make a new Django application called customers:

			2.7.1 : python manage.py startapp customers

					This will contain the models and views for managing customers. Models define the fields and behaviors of our application data, while views enable our application to properly handle web requests and return the required responses.

					Next, add this application to the list of installed applications in your project's settings.py file so Django will recognize it as part of the project. Open settings.py again:

					 ~/djangoreactproject/djangoreactproject/settings.py

					Add the customers application:

						~/djangoreactproject/djangoreactproject/settings.py
						...
					INSTALLED_APPS = [
				    ...
				    'rest_framework',
				    'corsheaders',
				    'customers'
									]


	2.8 : Next, migrate the database and start the local development server. Migrations are Djangoâ€™s way of 		   propagating the changes you make to your models into your database schema. These changes can include 	   things like adding a field or deleting a model, for example. For more on models and migrations, see 		   How To Create Django Models.

			2.8.1 : Migrate the database:

					2.8.1.1 : python manage.py makemigrations
					2.8.1.2 : python manage.py migrate

			2.8.2 : Start the local development server:
				    2.8.2.1 : python manage.py runserver
					
					You will see output similar to the following:

					********************************************************************************************
					*																						   *
					*	Output                                                                                 *
					*	Performing system checks...                                                            *
					*                                                                                          *
					*	System check identified no issues (0 silenced).                                        *
					*	October 22, 2018 - 15:14:50                                                            * 
					*	Django version 2.1.2, using settings 'djangoreactproject.settings'                     *
					*	Starting development server at http://127.0.0.1:8000/                                  *
					*	Quit the server with CONTROL-C.														   *
					*	Your web application will be running from http://127.0.0.1:8000. If you navigate to    *
					* 	address in your web browser you should see the following page:                         *
					*																						   *
					********************************************************************************************


At this point, leave the application running and open a new terminal to continue developing the project.



			
