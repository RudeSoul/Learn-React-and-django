*********** STEPS FOR CREATING DJANGO PROJECT AND REACT FRAMEWORK ***********


Step 1  : Creating a Python Virtual Environment and Installing Dependencies


		In this step, we'll create a virtual environment and install the required dependencies for our application, including Django, the Django REST framework, and django-cors-headers.

		Our application will use two different development servers for Django and React. They will run on different ports and will function as two separate domains. Because of this, we need to enable cross-origin resource sharing (CORS) to send HTTP requests from React to Django without being blocked by the browser.

		Navigate to your home directory and create a virtual environment using the venv Python 3 module:

		cd ~
		python3 -m venv ./env
		Activate the created virtual environment using source:

		source env/bin/activate
		Next, install the project's dependencies with pip. These will include:

		Django: The web framework for the project.
		Django REST framework: A third-party application that builds REST APIs with Django.
		django-cors-headers: A package that enables CORS.
		Install the Django framework:

		On cmd : pip install django djangorestframework django-cors-headers
			With the project dependencies installed, you can create the Django project and the React frontend.



To create django-prject :

 
Step2:	django-admin startproject projectname i.e in our case project name is learnreact


		2.1: Here you get lots of file like 
			2.1.1: manage.py 

			and folder with same name as project name

		2.2: Dig down into that folder of same name you will get some file with name 
			2.2.1: __init__.py
			2.2.2:	settings.py
			2.2.3:	urls.py
			2.2.4:	wsgi.py

		2.3: Some information of those files are:

			2.3.1: Manage.py : The utility script that does a number of administrative tasks.
			
			2.3.2: setting.py : The main configuration file for the Django project where you can modify the 						project's settings. These settings include variables such as INSTALLED_APPS, a 						list of strings designating the enabled applications for your project. The 	 						Django documentation has more information about available settings.

			2.3.3: urls.py   : This file contains a list of URL patterns and related views. Each pattern maps a  					connection between a URL and the function that should be called for that URL. For 					more on URLs and views, please refer to our tutorial on How To Create Django Views




    	2.4 : Our first step in working with the project will be to configure the packages we installed in the 		  previous step, including the Django REST framework and the Django CORS package, by adding them to 	  settings.py. Open the file with Visual Code Studio or your favorite editor:

			2.4.1 : Visual Code Studio: ~/learnreact/learnreact/settings.py
					Navigate to the INSTALLED_APPS setting and add the rest_framework and corsheaders applications to the bottom of the list:

			2.4.2 : ~/learnreact/learnreact/settings.py
					...

					INSTALLED_APPS = [
    					'django.contrib.admin',
    					'django.contrib.auth',
    					'django.contrib.contenttypes',
    					'django.contrib.sessions',
    					'django.contrib.messages',
    					'django.contrib.staticfiles',
    					'rest_framework',
    					'corsheaders'
									]
		2.5 : Next, add the corsheaders.middleware.CorsMiddleware middleware from the previously installed CORS 	   package to the MIDDLEWARE setting. This setting is a list of middlewares, a Python class that 		   contains code processed each time your web application handles a request or response:

			2.5.1 : ~/learnreact/learnreact/settings.py
					...

					MIDDLEWARE = [
									...
									'django.contrib.messages.middleware.MessageMiddleware',
									'django.middleware.clickjacking.XFrameOptionsMiddleware',
									'corsheaders.middleware.CorsMiddleware'
								  ]
		2.6: Next, you can enable CORS. The CORS_ORIGIN_ALLOW_ALL setting specifies whether or not you want to 		 allow CORS for all domains, and CORS_ORIGIN_WHITELIST is a Python tuple that contains allowed URLs. 	  In our case, because the React development server will be running at http://localhost:3000, we will 	   add new CORS_ORIGIN_ALLOW_ALL = False and CORS_ORIGIN_WHITELIST('localhost:3000',) settings to our 		 settings.py file. Add these settings anywhere in the file:

			2.6.1 : ~/learnreact/learnreact/settings.py
					...
					CORS_ORIGIN_ALLOW_ALL = False

					CORS_ORIGIN_WHITELIST = [
                     'http://localhost:3000',
                     'http://127.0.0.1:3000',
                        ]
					...

					You can find more configuration options in the django-cors-headers docs " https://github.com/ottoyiu/django-cors-headers/#configuration ".

			2.6.2 : Save the file and exit the editor when you are finished.

    2.7 : Still in the ~/learnreact directory, make a new Django application called "welearner":

			2.7.1 : python manage.py startapp welearner

					This will contain the models and views for managing welearner. Models define the fields and behaviors of our application data, while views enable our application to properly handle web requests and return the required responses.

					Next, add this application to the list of installed applications in your project's settings.py file so Django will recognize it as part of the project. Open settings.py again:

					 ~/learnreact/learnreact/settings.py

					Add the welearner application:

					~/learnreact/learnreact/settings.py
						...
					INSTALLED_APPS = [
				    ...
				    'rest_framework',
				    'corsheaders',
				    'welearner'
									]


	2.8 : Next, migrate the database and start the local development server. Migrations are Django’s way of 		   propagating the changes you make to your models into your database schema. These changes can include 	   things like adding a field or deleting a model, for example. For more on models and migrations, see 		   How To Create Django Models.

			2.8.1 : Migrate the database:


					2.8.1.1 : python manage.py makemigrations
					2.8.1.2 : python manage.py migrate


			2.8.2 : Start the local development server:
				    2.8.2.1 : python manage.py runserver


					
					You will see output similar to the following:

					********************************************************************************************
					*																						   *
					*	Output                                                                                 *
					*	Performing system checks...                                                            *
					*                                                                                          *
					*	System check identified no issues (0 silenced).                                        *
					*	October 22, 2018 - 15:14:50                                                            * 
					*	Django version 2.1.2, using settings 'learnreact.settings'                     *
					*	Starting development server at http://127.0.0.1:8000/                                  *
					*	Quit the server with CONTROL-C.														   *
					*	Your web application will be running from http://127.0.0.1:8000. If you navigate to    *
					* 	address in your web browser you should see the following page:                         *
					*																						   *
					********************************************************************************************


					At this point, leave the application running and open a new terminal to continue developing the project.



Step3:  Creating the React Frontend


	3.1:	 In this section, we're going to create the front-end application of our project using React.

			React has an official utility that allows you to quickly generate React projects without having to configure Webpack directly. Webpack is a module bundler used to bundle web assets such as JavaScript code, CSS, and images. Typically, before you can use Webpack you need to set various configuration options, but thanks to the create-react-app utility you don't have to deal with Webpack directly until you decide you need more control. To run create-react-app you can use npx, a tool that executes npm package binaries.

	3.2:	In your second terminal, make sure you are in your project directory:

			3.2.1: cd ~/learnreact
				   Create a React project called frontend using create-react-app and npx:

			3.2.2: npx create-react-app frontend
				   Next, navigate inside your React application and start the development server:

			3.2.3: cd ~/learnreact/frontend
			3.2.4: npm start

				   You application will be running from http://localhost:3000/:

		

			Leave the React development server running and open another terminal window to proceed.

			To see the directory structure of the entire project at this point, navigate to the root folder and run tree again:

			3.2.5: cd ~/learnreact
			3.2.6: tree

					You'll see a structure like this:

						Output
						├── welearner
						│   ├── admin.py
						│   ├── apps.py
						│   ├── __init__.py
						│   ├── migrations
						│   │   └── __init__.py
						│   ├── models.py
						│   ├── tests.py
						│   └── views.py
						├── learnreact
						│   ├── __init__.py
						│   ├── __pycache__
						│   ├── settings.py
						│   ├── urls.py
						│   └── wsgi.py
						├── frontend
						│   ├── package.json
						│   ├── public
						│   │   ├── favicon.ico
						│   │   ├── index.html
						│   │   └── manifest.json
						│   ├── README.md
						│   ├── src
						│   │   ├── App.css
						│   │   ├── App.js
						│   │   ├── App.test.js
						│   │   ├── index.css
						│   │   ├── index.js
						│   │   ├── logo.svg
						│   │   └── registerServiceWorker.js
						│   └── yarn.lock
						└── manage.py


					Our application will use Bootstrap 4 to style the React interface, so we will include it in the frontend/src/App.css file, which manages our CSS settings. Open the file:

			3.2.7: ~/learnreact/frontend/src/App.css

				   Add the following import to the beginning of the file. You can delete the file's existing content, though that's not required:

			3.2.8: ~/learnreact/frontend/src/App.css

			3.2.9: @import  'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css';

					Here, @import is a CSS instruction that's used to import style rules from other style sheets.

					Now that we have created both the back-end and front-end applications, let's create the Welearner model and some demo data.


Step 4 — 	Creating the Welearner Model and Initial Data

			After creating the Django application and the React frontend, our next step will be to create the Welearner model, which represents the database table that will hold information about welearner. You don't need any SQL since the Django Object Relational Mapper (ORM) will handle database operations by mapping Python classes and variables to SQL tables and columns. In this way the Django ORM abstracts SQL interactions with the database through a Python interface.

			Activate your virtual environment again:

	4.1:	
			4.1.1:  cd ~
					source env/bin/activate
			 		Move to the welearner directory, and open models.py, a Python file that holds the models of your application:

			4.1.2:	cd ~/learnreact/welearner/
			4.1.3:	models.py
					The file will contain the following content:

			4.1.4:	~/learnreact/welearner/models.py
			4.1.5:	from django.db import models

	4.2:			# Create your models here.
					The Welearner model's API is already imported in the file thanks to the from django.db import models import statement. You will now add the Welearner class, which extends models.Model. Each model in Django is a Python class that extends django.db.models.Model.

					The Welearner model will have these database fields:

					first_name — The first name of the learner.
					last_name — The last name of the learner.
					email — The email address of the learner.
					phone — The phone number of the learner.
					address — The address of the learner.
					description — The description of the learner.
					createdAt — The date when the learner is added.


					We will also add the __str__() function, which defines how the model will be displayed. In our case, it will be with the learner's first name. For more on constructing classes and defining objects, please see How To Construct Classes and Define Objects in Python 3.

	4.3:	Add the following code to the file:

			4.3.1:	~/learnreact/welearner/models.py
			
			4.3.2:	from django.db import models

			4.3.3:	class Welearner(models.Model):

				    	first_name = models.CharField("First name", max_length=255)
				    	last_name = models.CharField("Last name", max_length=255)
				    	email = models.EmailField()
				    	phone = models.CharField(max_length=20)
				    	address =  models.TextField(blank=True, null=True)
				    	description = models.TextField(blank=True, null=True)
				    	createdAt = models.DateTimeField("Created At", auto_now_add=True)

					def __str__(self):
			        	return self.first_name


					Next, migrate the database to create the database tables. The makemigrations command creates the migration files where model changes will be added, and migrate applies the changes in the migrations files to the database.

	4.4:	Navigate back to the project's root folder:

			4.4.1:	cd ~/learnreact
					Run the following to create the migration files:

			4.4.2:	python manage.py makemigrations
					You will get output that looks like this:

					Output
						welearner/migrations/0001_initial.py
			    		- Create model Welearner
					Apply these changes to the database:

			4.4.3:	python manage.py migrate
					You will see output indicating a successful migration:

					Output
						Operations to perform:
						  Apply all migrations: admin, auth, contenttypes, welearner, sessions
						Running migrations:
						  Applying welearner.0001_initial... OK
						Next, you will use a data migration file to create initial learner data. A data migration file is a migration that adds or alters data in the database. Create an empty data migration file for the welearner application:

			4.4.4:	python manage.py makemigrations --empty --name welearner welearner
					You will see the following confirmation with the name of your migration file:

						Output
						Migrations for 'welearner':
						  welearner/migrations/0002_welearner.py
						Note that the name of your migration file is 0002_customers.py.

	4.5:	Next, navigate inside the migrations folder of the welearner application:

			4.5.1:	cd ~/learnreact/welearner/migrations
			4.5.2:	Open the created migration file:

			4.5.3:	nano 0002_customers.py
					This is the initial content of the file:

			4.5.4:	~/learnreact/welearner/migrations/0002_welearner.py
			4.5.5:	from django.db import migrations

	4.6:	class Migration(migrations.Migration):
			    dependencies = [
			        ('welearner', '0001_initial'),
			    ]
			    operations = [
			    ]        
			The import statement imports the migrations API, a Django API for creating migrations, from django.db, a built-in package that contains classes for working with databases.

			The Migration class is a Python class that describes the operations that are executed when migrating databases. This class extends migrations.Migration and has two lists:

			dependencies: Contains the dependent migrations.
			operations: Contains the operations that will be executed when we apply the migration.
			Next, add a method to create demo learner data. Add the following method before the definition of the Migration class:

			4.6.1:	~/learnreact/welearner/migrations/0002_customers.py
					...
			4.6.2:	def create_data(apps, schema_editor):
			    		Welearner = apps.get_model('welearner', 'Welearner')
			    		Welearner(first_name="Welearner 001", last_name="Welearner 001", email="welearner@email.com", phone="00000000", address="Welearner 000 Address", description= "Welearner 001 description").save()

					...
			In this method, we are grabbing the Welearner class of our welearner app and creating a demo learner to insert into the database.

			To get the Welearner class, which will enable the creation of new welearner, we use the get_model() method of the apps object. The apps object represents the registry of installed applications and their database models.

			The apps object will be passed from the RunPython() method when we use it to run create_data(). Add the migrations.RunPython() method to the empty operations list:

			4.6.3:	~/learnreact/welearner/migrations/0002_customers.py

					...
			    	operations = [
			        	migrations.RunPython(create_data),
			    	]  	
			RunPython() is part of the Migrations API that allows you to run custom Python code in a migration. Our operations list specifies that this method will be executed when we apply the migration.

	4.7:This is the complete file:

			4.7.1:	~/learnreact/welearner/migrations/0002_customers.py
			4.7.2:	from django.db import migrations

			4.7.3:	def create_data(apps, schema_editor):
			    		Welearner = apps.get_model('welearner', 'Welearner')
			    		Welearner(first_name="Welearner 001", last_name="Welearner 001", email="customer001@email.com", phone="00000000", address="Welearner 000 Address", description= "Welearner 001 description").save()

			4.7.4:	class Migration(migrations.Migration):
			    		dependencies = [
			        	('welearner', '0001_initial'),
			    		]
			4.7.5:   operations = [
			        	migrations.RunPython(create_data),
			    					]        
			For more information on data migrations, see the documentation on data migrations in Django

			To migrate your database, first navigate back to the root folder of your project:

	4.8:	
			4.8.1:	cd ~/learnreact
			4.8.2:	Migrate your database to create the demo data:

			4.8.3:	python manage.py migrate
						You will see output that confirms the migration:

						Output
						Operations to perform:
						  Apply all migrations: admin, auth, contenttypes, welearner, sessions
						Running migrations:
						  Applying welearner.0002_customers... OK
			For more details on this process, refer back to How To Create Django Models.

			With the Welearner model and demo data created, we can move on to building the REST API.



								
